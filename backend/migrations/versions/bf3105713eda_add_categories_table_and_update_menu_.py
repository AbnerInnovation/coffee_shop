"""Add categories table and update menu_items

Revision ID: bf3105713eda
Revises: 61f48234a69c
Create Date: 2025-08-29 23:14:14.440989

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = 'bf3105713eda'
down_revision: Union[str, None] = '61f48234a69c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create categories table
    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    
    # Create indexes
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_index(op.f('ix_categories_name'), 'categories', ['name'], unique=True)
    
    # Add category_id column as nullable first with a default value
    op.add_column('menu_items', sa.Column('category_id', sa.Integer(), nullable=True, server_default='1'))
    op.execute("UPDATE menu_items SET category_id = 1 WHERE category_id IS NULL")
    
    # Create a temporary table for the old category values
    category_table = sa.table('categories',
        sa.column('id', sa.Integer()),
        sa.column('name', sa.String()),
        sa.column('description', sa.String())
    )
    
    # Insert default categories
    op.bulk_insert(category_table,
        [
            {'name': 'COFFEE', 'description': 'Coffee drinks'},
            {'name': 'TEA', 'description': 'Tea drinks'},
            {'name': 'PASTRY', 'description': 'Pastries and baked goods'},
            {'name': 'SANDWICH', 'description': 'Sandwiches and wraps'},
            {'name': 'DESSERT', 'description': 'Desserts and sweets'},
            {'name': 'SMOOTHIE', 'description': 'Smoothies and shakes'},
            {'name': 'OTHER', 'description': 'Other items'}
        ]
    )
    
    # Update existing menu_items with category_id based on the old category column
    connection = op.get_bind()
    categories = connection.execute(sa.text("SELECT id, name FROM categories")).fetchall()
    category_map = {name.upper(): id for id, name in categories}
    
    # Get all menu items with their current category
    menu_items = connection.execute(sa.text("SELECT id, category FROM menu_items")).fetchall()
    
    # Update each menu item with the corresponding category_id
    for item_id, category in menu_items:
        if category:
            category_upper = category.upper()
            if category_upper in category_map:
                connection.execute(
                    sa.text("UPDATE menu_items SET category_id = :cat_id WHERE id = :item_id"),
                    {'cat_id': category_map[category_upper], 'item_id': item_id}
                )
    
    # Now that we've populated category_id, make it non-nullable
    # First, ensure all rows have a category_id
    op.execute("UPDATE menu_items SET category_id = 1 WHERE category_id IS NULL")
    # Then alter the column to be non-nullable
    op.alter_column('menu_items', 'category_id',
                   existing_type=sa.Integer(),
                   nullable=False,
                   server_default=None)
    
    # Add foreign key constraint
    op.create_foreign_key('fk_menu_items_category_id', 'menu_items', 'categories', ['category_id'], ['id'])
    
    # Finally, drop the old category column
    op.drop_column('menu_items', 'category')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # First, add back the old category column
    op.add_column('menu_items', 
        sa.Column('category', 
            mysql.ENUM('coffee', 'tea', 'pastry', 'sandwich', 'dessert', 'smoothie', 'other', 
                      charset='utf8mb4', 
                      collation='utf8mb4_unicode_ci'), 
            nullable=True)
    )
    
    # Update the category column based on the category_id
    connection = op.get_bind()
    categories = connection.execute(sa.text("SELECT id, name FROM categories")).fetchall()
    category_map = {id: name.lower() for id, name in categories}
    
    # Get all menu items with their category_id
    menu_items = connection.execute(sa.text("SELECT id, category_id FROM menu_items")).fetchall()
    
    # Update each menu item with the corresponding category name
    for item_id, category_id in menu_items:
        if category_id and category_id in category_map:
            connection.execute(
                sa.text("UPDATE menu_items SET category = :cat_name WHERE id = :item_id"),
                {'cat_name': category_map[category_id], 'item_id': item_id}
            )
    
    # Make the category column non-nullable
    # MySQL requires the existing type when modifying columns
    op.alter_column('menu_items', 'category', 
                   existing_type=sa.Enum('coffee', 'tea', 'pastry', 'sandwich', 'dessert', 'smoothie', 'other'),
                   nullable=False,
                   existing_server_default=None,
                   existing_comment=None)
    
    # Drop the foreign key constraint and category_id column
    op.drop_constraint('fk_menu_items_category_id', 'menu_items', type_='foreignkey')
    op.drop_column('menu_items', 'category_id')
    
    # Drop the categories table and its indexes
    op.drop_index(op.f('ix_categories_name'), table_name='categories')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_table('categories')
    # ### end Alembic commands ###
